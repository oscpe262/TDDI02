Egna datatyper/klasser:

MatLabbGUI		// Användargränssnitt, Qt, ???
Shell			// Inre skal
Recipe			// Klass som innehåller alla hämtad information om ett recept
RecipeIngredient	// Strukt som håller namn på ingrediens och dess kvantitet i ett särskilt recept
RelatedRecipe		// Relaterat recept - strukt håller ett receptnamn och en bool som bör vara true endast om det relaterade receptet i databasen har samma relation med Receptet
MiniRecipe		// strukt som håller nerskalad information om ett recept - används (kanske?) för att implentera en längre lista av sökresultat


~matlabb~	// out-fil

	~matlabb.cc~		*****
	{
	   MatLabbGUI mlgui;	// den klass som innehåller .run()
	   
	   try
	   {
	      mlgui.run();
	   }
	   catch ...
	   ...
	}

	~Shell.h~		*****	// headerfil för klass "MatLabb-skal"
	{
	   class Shell
	   {
	   public:
	      defaultkonstruktor

	      x kopieringskonstruktor
	      x kopieringstilldelningsoperator

	      void run(); // bör ligga i GUI om det är yttre skalet

	      void		addRecipe(string, ...);
	      void		editRecipe();
	      void		importTxt(string, ...); // används även vid kommandoradsargument om aktuellt
	      void		exportTxt();	  	// kalla på currentRecipe.exportTxt()
	      
	      void		matchRecipe(string);
	      void		matchIngredient(string);
	      void		searchRecipe(cont<SearchTerm*>);

	      relevantdatatyp	getfunktioner()		// Används av GUI för rendering

	   private:

	      Recipe		currentRecipe_;
	      Ingredient	currentIngredient_;
	      cont<MiniRecipe>	recipeSearchResults_;
	      cont<string>	ingredientFullList_;
	      double		scaling_;
	      cont<SearchTerm*>	searchTerms_;
	      
	      
	      
	   }
	      
	}

	
	~Recipe.h~		*****
	{
	
	   struct RecipeIngredient // SKA ÄNDRAS TILL KLASSARV FRÅN Ingredient. SYSKON MED InfoIngredient
	   {
	      Ingredient	ingredient_;
	      double		amount_;
	      "unittype"	unit_;
		  getKcal(double scaling)
		  getPrice(double scaling)
	   }
	   
	   struct RelatedRecipe
	   {
	      explicit RelatedRecipe ( const string& name, string relatedName ) // etc, deleta kopiering

	      const string&	name_;
	      string		relatedName_;
	      bool		isRelated_ {false}; // default false?
	   }

	   struct MiniRecipe	// om klassen Recipe är för komplicerad/stor för att lista många sökresultat
	   {
	      string		name_;
	      int 		minutesTime_;
	      double		grade_;
	      int		Kcal_; // kanske skippa denna för enkelhetens skull då vi ej hämtar information om ingredienser.
	   }

	   class Recipe
	   {
	   public:
	      konstruktorer/tilldelningsoperatorer
		MatLabbGUI.addRecipe(string, ...) // skapar ett recept, potentiellt från textfil
	      
	      double		getPrice(double scaling);
	      int		getKcal(double scaling);
	      void		exportTxt(string name = name + ".txt");
	      void		editRecipe();
	      
	   private:
	      
	      string			name_;
	      string			description_;
	      int			minutesTime_;
	      cont<string>		comments_;
	      "reftoimage"		image_;
	      double			grade_;
	      cont<RecipeIngredient>	ingredients_;
	      cont<RelatedRecipe>		relatedRecipes_; // RelatedPair är en datatyp vars objekt endast ska kunna existera om det hänvisar till ett recept i databasen som kan hänvisa tillbaka till oss. Dvs, inga enkelriktade relationer.

	      

	   }	
	}

	~Ingredient.h~		*****
	{
	   class Ingredient
	   {
	   public:
	      
	      
	   private:
	      
	   }
	}
	
	
	KOMMENTARER:
	
	1. RecipeIngredient bör kanske vara härledd från Ingredient???
